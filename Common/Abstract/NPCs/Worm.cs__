using System;
using Microsoft.Xna.Framework;
using Terraria;
using Terraria.Audio;
using Terraria.ID;
using Terraria.ModLoader;

namespace EmptySet.Common.Abstract.NPCs;

/// <summary>
/// 
/// </summary>
/// <remarks>
/// ai[0] = follower <br/>
/// ai[1] = following <br/>
/// ai[2] = distanceFromTail <br/>
/// ai[3] = head <br/>
///
/// </remarks>
public abstract class Worm : ModNPC
{
    protected float slowSpeed = 5.5f;
    protected float fastSpeed = 100f;
    protected bool head;
    protected bool tail;
    protected int minLength;
    protected int maxLength;
    protected int headType;
    protected int bodyType;
    protected int tailType;
    protected bool flies = false;
    protected bool directional = false;
    protected float speed;
    protected float turnSpeed;

    public override void AI()
    {
        if (NPC.localAI[1] == 0f)
        {
            NPC.localAI[1] = 1f;
            Init();
        }

        if (NPC.ai[3] > 0f)
            NPC.realLife = (int) NPC.ai[3];

        if (!head && NPC.timeLeft < 300)
            NPC.timeLeft = 300;

        if (NPC.target < 0 || NPC.target == 255 || Main.player[NPC.target].dead)
            NPC.TargetClosest();

        if (Main.player[NPC.target].dead && NPC.timeLeft > 300)
            NPC.timeLeft = 300;

        if (Main.netMode != NetmodeID.MultiplayerClient)
        {
            if (!tail && NPC.ai[0] == 0f)
            {
                var source = NPC.GetSource_FromAI();

                if (head)
                {
                    NPC.ai[3] = NPC.whoAmI;
                    NPC.realLife = NPC.whoAmI;
                    NPC.ai[2] = Main.rand.Next(minLength, maxLength + 1);
                    NPC.ai[0] = NPC.NewNPC(source, (int)(NPC.position.X + (NPC.width / 2f)), (int)(NPC.position.Y + NPC.height), bodyType, NPC.whoAmI);
                }
                else if (NPC.ai[2] > 0f)
                {
                    NPC.ai[0] = NPC.NewNPC(source, (int)(NPC.position.X + (NPC.width / 2f)), (int)(NPC.position.Y + NPC.height), NPC.type, NPC.whoAmI);
                }
                else
                {
                    NPC.ai[0] = NPC.NewNPC(source, (int)(NPC.position.X + (NPC.width / 2f)), (int)(NPC.position.Y + NPC.height), tailType, NPC.whoAmI);
                }

                Main.npc[(int)NPC.ai[0]].ai[3] = NPC.ai[3];
                Main.npc[(int)NPC.ai[0]].realLife = NPC.realLife;
                Main.npc[(int)NPC.ai[0]].ai[1] = NPC.whoAmI;
                Main.npc[(int)NPC.ai[0]].ai[2] = NPC.ai[2] - 1f;
                NPC.netUpdate = true;
            }
            if (!head && (!Main.npc[(int)NPC.ai[1]].active || Main.npc[(int)NPC.ai[1]].type != headType && Main.npc[(int)NPC.ai[1]].type != bodyType))
            {
                NPC.life = 0;
                NPC.HitEffect(0, 10.0);
                NPC.active = false;
            }
            if (!tail && (!Main.npc[(int)NPC.ai[0]].active || Main.npc[(int)NPC.ai[0]].type != bodyType && Main.npc[(int)NPC.ai[0]].type != tailType))
            {
                NPC.life = 0;
                NPC.HitEffect(0, 10.0);
                NPC.active = false;
            }
            if (!NPC.active && Main.netMode == NetmodeID.Server)
            {
                NetMessage.SendData(MessageID.DamageNPC, number: NPC.whoAmI, number2: -1f);
            }
        }

        int npcLeftX = (int)(NPC.position.X / 16f) - 1;
        int npcRightX = (int)((NPC.position.X + NPC.width) / 16f) + 2;
        int npcTopY = (int)(NPC.position.Y / 16f) - 1;
        int npcBottomY = (int)((NPC.position.Y + NPC.height) / 16f) + 2;

        if (npcLeftX < 0)
            npcLeftX = 0;
        if (npcRightX > Main.maxTilesX)
            npcRightX = Main.maxTilesX;
        if (npcTopY < 0)
            npcTopY = 0;
        if (npcBottomY > Main.maxTilesY)
            npcBottomY = Main.maxTilesY;

        bool isFly = flies;
        if (!isFly)
        {
            for (int i = npcLeftX; i < npcRightX; i++)
            {
                for (int j = npcTopY; j < npcBottomY; j++)
                {
                    //if (Main.tile[i, j] != null && (Main.tile[i, j].HasUnactuatedTile && (Main.tileSolid[(int)Main.tile[i, j].TileType] || Main.tileSolidTop[(int)Main.tile[i, j].TileType] && Main.tile[i, j].TileFrameY == 0) || Main.tile[i, j].LiquidAmount > 64))

                    Vector2 vector17;
                    vector17.X = (i * 16);
                    vector17.Y = (j * 16);
                    if (NPC.position.X + NPC.width > vector17.X &&
                        NPC.position.X < vector17.X + 16f && 
                        NPC.position.Y + NPC.height > vector17.Y &&
                        NPC.position.Y < vector17.Y + 16f)
                    {
                        isFly = true;
                        if (Main.rand.NextBool(100) && NPC.behindTiles && Main.tile[i, j].HasUnactuatedTile)
                        {
                            WorldGen.KillTile(i, j, true, true, false);
                        }
                        if (Main.netMode != NetmodeID.MultiplayerClient && Main.tile[i, j].TileType == 2)
                        {
                            ushort arg_BFCA_0 = Main.tile[i, j - 1].TileType;
                        }
                    }
						
                }
            }
        }
        if (!isFly && head)
        {
            var rectangle = new Rectangle((int)NPC.position.X, (int)NPC.position.Y, NPC.width, NPC.height);
            var num186 = 1000;
            var flag19 = true;
            for (int i = 0; i < 255; i++)
            {
                if (Main.player[i].active)
                {
                    var rectangle2 = new Rectangle((int)Main.player[i].position.X - num186, (int)Main.player[i].position.Y - num186, num186 * 2, num186 * 2);
                    if (rectangle.Intersects(rectangle2))
                    {
                        flag19 = false;
                        break;
                    }
                }
            }
            if (flag19)
            {
                isFly = true;
            }
        }
        if (directional)
        {
            if (NPC.velocity.X < 0f)
                NPC.spriteDirection = 1;
            else if (NPC.velocity.X > 0f)
                NPC.spriteDirection = -1;
        }



        var theSpeed = speed;
        var theTurnSpeed = turnSpeed;
        var vector18 = new Vector2(NPC.position.X + NPC.width * 0.5f, NPC.position.Y + NPC.height * 0.5f);
        var npcToPlayerX = Main.player[NPC.target].position.X + (Main.player[NPC.target].width / 2f);
        var npcToPlayerY = Main.player[NPC.target].position.Y + (Main.player[NPC.target].height / 2f);
        npcToPlayerX = (npcToPlayerX / 16f) * 16;
        npcToPlayerY = (npcToPlayerY / 16f) * 16;
        vector18.X = (vector18.X / 16f) * 16;
        vector18.Y = (vector18.Y / 16f) * 16;
        npcToPlayerX -= vector18.X;
        npcToPlayerY -= vector18.Y;
        float normOfNpcToPlayer = (float)Math.Sqrt((npcToPlayerX * npcToPlayerX + npcToPlayerY * npcToPlayerY));
        if (NPC.ai[1] > 0f && NPC.ai[1] < Main.npc.Length)
        {
            try
            {
                vector18 = new Vector2(NPC.position.X + NPC.width * 0.5f, NPC.position.Y + NPC.height * 0.5f);
                npcToPlayerX = Main.npc[(int)NPC.ai[1]].position.X + (Main.npc[(int)NPC.ai[1]].width / 2f) - vector18.X;
                npcToPlayerY = Main.npc[(int)NPC.ai[1]].position.Y + (Main.npc[(int)NPC.ai[1]].height / 2f) - vector18.Y;
            }
            catch
            {
            }
            NPC.rotation = (float)Math.Atan2(npcToPlayerY, npcToPlayerX) + 1.57f;
            normOfNpcToPlayer = (float)Math.Sqrt((npcToPlayerX * npcToPlayerX + npcToPlayerY * npcToPlayerY));
            int npcWidth = NPC.width;
            normOfNpcToPlayer = (normOfNpcToPlayer - npcWidth) / normOfNpcToPlayer;
            npcToPlayerX *= normOfNpcToPlayer;
            npcToPlayerY *= normOfNpcToPlayer;
            NPC.velocity = Vector2.Zero;
            NPC.position.X += npcToPlayerX;
            NPC.position.Y += npcToPlayerY;
            if (directional)
            {
                if (npcToPlayerX < 0f)
                {
                    NPC.spriteDirection = 1;
                }
                if (npcToPlayerX > 0f)
                {
                    NPC.spriteDirection = -1;
                }
            }
        }
        else
        {
            if (!isFly)
            {
                NPC.TargetClosest(true);
                NPC.velocity.Y += 0.11f;
                if (NPC.velocity.Y > theSpeed)
                {
                    NPC.velocity.Y = theSpeed;
                }
                if ((Math.Abs(NPC.velocity.X) + Math.Abs(NPC.velocity.Y)) < theSpeed * 0.4d)
                {
                    if (NPC.velocity.X < 0f)
                    {
                        NPC.velocity.X -= theTurnSpeed * 1.1f;
                    }
                    else
                    {
                        NPC.velocity.X += theTurnSpeed * 1.1f;
                    }
                }
                else if (NPC.velocity.Y == theSpeed)
                {
                    if (NPC.velocity.X < npcToPlayerX)
                    {
                        NPC.velocity.X += theTurnSpeed;
                    }
                    else if (NPC.velocity.X > npcToPlayerX)
                    {
                        NPC.velocity.X -= theTurnSpeed;
                    }
                }
                else if (NPC.velocity.Y > 4f)
                {
                    if (NPC.velocity.X < 0f)
                    {
                        NPC.velocity.X += theTurnSpeed * 0.9f;
                    }
                    else
                    {
                        NPC.velocity.X -= theTurnSpeed * 0.9f;
                    }
                }
            }
            else
            {
                if (!flies && NPC.behindTiles && NPC.soundDelay == 0)
                {
                    float distanceOfPlayer = normOfNpcToPlayer / 40f;
                    if (distanceOfPlayer < 10f)
                        distanceOfPlayer = 10f;
                    if (distanceOfPlayer > 20f)
                        distanceOfPlayer = 20f;
                    NPC.soundDelay = (int)distanceOfPlayer;
                    SoundEngine.PlaySound(SoundID.Roar, NPC.position);
                }
                //npc
                normOfNpcToPlayer = (float)Math.Sqrt((npcToPlayerX * npcToPlayerX + npcToPlayerY * npcToPlayerY));
                float npcToPlayerXAbs = Math.Abs(npcToPlayerX);
                float npcToPlayerYAbs = Math.Abs(npcToPlayerY);
                float normSpeed = theSpeed / normOfNpcToPlayer;
                npcToPlayerX *= normSpeed;
                npcToPlayerY *= normSpeed;
                if (ShouldRun())
                {
                    bool isAnyPlayerAlive = true;
                    for (int i = 0; i < 255; i++)
                        if (Main.player[i].active && !Main.player[i].dead && Main.player[i].ZoneCorrupt)
                            isAnyPlayerAlive = false;
                    if (isAnyPlayerAlive)
                    {
                        if (Main.netMode != NetmodeID.MultiplayerClient && (double)(NPC.position.Y / 16f) > (Main.rockLayer + (double)Main.maxTilesY) / 2.0)
                        {
                            NPC.active = false;
                            int NPCai0 = (int)NPC.ai[0];
                            while (NPCai0 > 0 && NPCai0 < 200 && Main.npc[NPCai0].active && Main.npc[NPCai0].aiStyle == NPC.aiStyle)
                            {
                                int npcai0 = (int)Main.npc[NPCai0].ai[0];
                                Main.npc[NPCai0].active = false;
                                NPC.life = 0;
                                if (Main.netMode == NetmodeID.Server)
                                {
                                    NetMessage.SendData(MessageID.SyncNPC, number: NPCai0);
                                }
                                NPCai0 = npcai0;
                            }
                            if (Main.netMode == NetmodeID.Server)
                            {
                                NetMessage.SendData(MessageID.SyncNPC, number: NPC.whoAmI);
                            }
                        }
                        npcToPlayerX = 0f;
                        npcToPlayerY = theSpeed;
                    }
                }

                bool flag21 = false;//???

                if (!flag21)
                {
                    if (NPC.velocity.X > 0f && npcToPlayerX > 0f ||
                        NPC.velocity.X < 0f && npcToPlayerX < 0f ||
                        NPC.velocity.Y > 0f && npcToPlayerY > 0f ||
                        NPC.velocity.Y < 0f && npcToPlayerY < 0f)
                    {
                        if (NPC.velocity.X < npcToPlayerX)
                            NPC.velocity.X += theTurnSpeed;
                        else
                        {
                            if (NPC.velocity.X > npcToPlayerX)
                                NPC.velocity.X -= theTurnSpeed;
                        }
                        if (NPC.velocity.Y < npcToPlayerY)
                            NPC.velocity.Y += theTurnSpeed;
                        else
                        {
                            if (NPC.velocity.Y > npcToPlayerY)
                                NPC.velocity.Y -= theTurnSpeed;
                        }
                        if (Math.Abs(npcToPlayerY) < theSpeed * 0.2 && (NPC.velocity.X > 0f && npcToPlayerX < 0f || NPC.velocity.X < 0f && npcToPlayerX > 0f))
                        {
                            if (NPC.velocity.Y > 0f)
                                NPC.velocity.Y += theTurnSpeed * 2f;
                            else
                                NPC.velocity.Y -= theTurnSpeed * 2f;
                        }
                        if (Math.Abs(npcToPlayerX) < theSpeed * 0.2 && (NPC.velocity.Y > 0f && npcToPlayerY < 0f || NPC.velocity.Y < 0f && npcToPlayerY > 0f))
                        {
                            if (NPC.velocity.X > 0f)
                                NPC.velocity.X += theTurnSpeed * 2f;
                            else
                                NPC.velocity.X -= theTurnSpeed * 2f;
                        }
                    }
                    else
                    {
                        if (npcToPlayerXAbs > npcToPlayerYAbs)
                        {
                            if (NPC.velocity.X < npcToPlayerX)
                                NPC.velocity.X += theTurnSpeed * 1.1f;
                            else if (NPC.velocity.X > npcToPlayerX)
                                NPC.velocity.X -= theTurnSpeed * 1.1f;
                            if ((Math.Abs(NPC.velocity.X) +Math.Abs(NPC.velocity.Y)) < theSpeed * 0.5)
                            {
                                if (NPC.velocity.Y > 0f)
                                    NPC.velocity.Y += theTurnSpeed;
                                else
                                    NPC.velocity.Y -= theTurnSpeed;
                            }
                        }
                        else
                        {
                            if (NPC.velocity.Y < npcToPlayerY)
                                NPC.velocity.Y += theTurnSpeed * 1.1f;
                            else if (NPC.velocity.Y > npcToPlayerY)
                            
                                NPC.velocity.Y -= theTurnSpeed * 1.1f;
                            if ((Math.Abs(NPC.velocity.X) + Math.Abs(NPC.velocity.Y)) < theSpeed * 0.5)
                            {
                                if (NPC.velocity.X > 0f)
                                    NPC.velocity.X += theTurnSpeed;
                                else
                                    NPC.velocity.X -= theTurnSpeed;
                            }
                        }
                    }
                }
            }
            NPC.rotation = (float)Math.Atan2(NPC.velocity.Y, NPC.velocity.X) + 1.57f;
            if (head)
            {
                if (isFly)
                {
                    if (NPC.localAI[0] != 1f)
                        NPC.netUpdate = true;
                    NPC.localAI[0] = 1f;
                }
                else
                {
                    if (NPC.localAI[0] != 0f)
                        NPC.netUpdate = true;
                    NPC.localAI[0] = 0f;
                }
                if ((NPC.velocity.X > 0f && NPC.oldVelocity.X < 0f ||
                     NPC.velocity.X < 0f && NPC.oldVelocity.X > 0f ||
                     NPC.velocity.Y > 0f && NPC.oldVelocity.Y < 0f ||
                     NPC.velocity.Y < 0f && NPC.oldVelocity.Y > 0f) && !NPC.justHit)
                {
                    NPC.netUpdate = true;
                    return;
                }
            }
        }
        CustomBehavior();
    }

    /// <summary>
    /// minLength = 30;
    /// maxLength = 30;
    /// tailType = ModContent.NPCType<JungleHunterTail>();
    /// bodyType = ModContent.NPCType<JungleHunterBody>();
    /// headType = ModContent.NPCType<JungleHunterHead>();
    /// speed = slowSpeed;
    /// turnSpeed = 0.1f;
    /// </summary>
    public abstract void Init();

    public virtual bool ShouldRun() => false;

    public virtual void CustomBehavior()
    {
    }

    public override bool? DrawHealthBar(byte hbPosition, ref float scale, ref Vector2 position)
    {
        return head ? (bool?)null : false;
    }

}